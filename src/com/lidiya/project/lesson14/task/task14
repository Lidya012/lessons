public class Task14 {

    public static <T extends Vehicle, K extends T> K[] task01(T first, K second, Car car){
        // какие методы можно вызвать у second?
        // какие из аргументов можно добавить в массив, а какие нет и почему
        K[] arr = {};
        return arr;
    }
     1. У second можно вызвать методы Vehicle и его супертипов (Object)
           В массив можно добавить аргументы всех наследников класса Vehicle,
           т.к тип K ограничивается классом Vehicle, поэтому в массив мы можем добавить его
            или его наследников благодаря полиморфизму.
            Т.е. добавить экземпляры классов Car, MiniCar, Train, Bus.
              Экземпляры класса Vehicle добавить не можем, т.к. он абстрактный

    public static void main(String[] args) {
        // Задание 1
        // какие типы можно указать в угловых скобках вместо ??? и
        // экземпляры каких классов передать?

        Task14.<Vehicle, ???>task01();
        Task14.<???, MiniCar >task01();
        Task14.<Train, ???>task01();


         в первую строку можно указать Vehicle и его подтипы,
        экзмепляры первые два: Vehicle и его наследники, третий параметр только Car
        Если мы ограничивыем тип например до Car, тогда Car - верхняя планка и параметры будут его подклассы уже и тд.
        Для второй строки мы можем добавить типы Car, Vehicle, MiniCar - в зависимости от этого уже будет влиять на
        передаваемые параметры: для Vehicle, MiniCar - > Bus, miniCar, car и тд.
        Для третьего случая можно объявлять тип Train и его возможных наследников, но в данном случае будет только Train
        следовательно и параметры будут первые два только экземпляры Train






        // Задание 2
        // Написать метод, который принимает на вход массив чисел (использовать дженерик)
        // и возвращает PairContainer, где ключи - сумма четных элементов
        // значения - сумма нечетных элементов
    }